services:
  elysia:
    image: "oven/bun:latest"
    container_name: "elysia_unity"
    depends_on:
      - adminer
    restart: "unless-stopped"
    networks:
      - dev-proxy
      - db-net
    # override default entrypoint allows us to do `bun install` before serving
    entrypoint: []
    # execute bun install before we start the dev server in watch mode
    command: "/bin/sh -c
      'bun install
      && bun build
      --compile
      --minify-whitespace
      --minify-syntax
      --target bun
      --outfile server
      ./src/index.ts
      && ./server'"
    # setup a host mounted volume to sync changes to the container
    volumes:
      - "./app:/home/bun/app"
    # expose the right ports
    # ports: ["7777:3000"]
    env_file: ".env"
    labels:
      - "traefik.http.routers.elysia-http.entrypoints=web"
      - "traefik.http.routers.elysia-http.rule=Host(`elysia.docker.localhost`)"
      - "traefik.http.services.elysia.loadbalancer.server.port=3000"
      # - "traefik.http.routers.elysia-http.middlewares=elysia-https"
      # - "traefik.http.middlewares.elysia-https.redirectscheme.scheme=https"
      # - "traefik.http.routers.elysia.entrypoints=websecure"
      # - "traefik.http.routers.elysia.rule=Host(`elysia.docker.localhost`)"
      # - "traefik.http.routers.elysia.tls=true"
      - "traefik.docker.network=dev-proxy"

  mongo:
    image: mongo:8.0.1-noble
    container_name: elysia_mongodb
    restart: always
    volumes:
      - ./mongodata:/data/db
    # ports:
    #   - 2345:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${USER}
      - MONGO_INITDB_ROOT_PASSWORD=${PASS}
    networks:
      - dbnet

  mongo-express:
  image: mongo-express:1-18
  restart: always
  container_name: elysia_mongopanel
  depends_on:
    - mongo
  environment:
    - ME_CONFIG_MONGODB_ADMINUSERNAME=${USER}
    - ME_CONFIG_MONGODB_ADMINPASSWORD=${PASS}
    - ME_CONFIG_MONGODB_URL=mongodb://${USER}:${PASS}@mongodb/
    - ME_CONFIG_BASICAUTH=false
  labels:
    - "traefik.http.routers.express-http.entrypoints=web"
    - "traefik.http.routers.express-http.rule=Host(`express.docker.localhost`)"
    - "traefik.http.services.express.loadbalancer.server.port=8081"
    # - "traefik.http.routers.express-http.middlewares=express-https"
    # - "traefik.http.middlewares.express-https.redirectscheme.scheme=https"
    # - "traefik.http.routers.express.entrypoints=websecure"
    # - "traefik.http.routers.express.rule=Host(`express.docker.localhost`)"
    # - "traefik.http.routers.express.tls=true"
    - "traefik.docker.network=dev-proxy"
  networks:
    - dbnet
    - dev-proxy

  # postgres:
  #   image: postgres:16.4-bullseye
  #   container_name: gamedb
  #   restart: always
  #   shm_size: 128mb
  #   environment:
  #     - POSTGRES_USER=${USER}
  #     - POSTGRES_PASSWORD=${PASS}
  #     - POSTGRES_DB=elysia
  #     - PGDATA=/var/lib/postgresql/data/pgdata
  #     # - POSTGRES_HOST_AUTH_METHOD
  #   volumes:
  #     - ./db/data:/var/lib/postgresql/data
  #   networks:
  #     - db-net

  # adminer:
  #   image: dockette/adminer:pgsql
  #   container_name: admin_ely
  #   depends_on:
  #     - postgres
  #   restart: always
  #   environment:
  #     - UPLOAD=4096M
  #     - MEMORY=128M
  #   networks:
  #     - dev-proxy
  #     - db-net
  #   labels:
  #     - "traefik.http.routers.adminer-http.entrypoints=web"
  #     - "traefik.http.routers.adminer-http.rule=Host(`admin_ely.docker.localhost`)"
  #     - "traefik.http.services.adminer.loadbalancer.server.port=80"
  #     # - "traefik.http.routers.adminer-http.middlewares=adminer-https"
  #     # - "traefik.http.middlewares.adminer-https.redirectscheme.scheme=https"
  #     # - "traefik.http.routers.adminer.entrypoints=websecure"
  #     # - "traefik.http.routers.adminer.rule=Host(`adminer.docker.localhost`)"
  #     # - "traefik.http.routers.adminer.tls=true"
  #     - "traefik.docker.network=dev-proxy"

networks:
  dev-proxy:
    external: true
  db-net:
    driver: bridge
# volumes:
#   data:
